/*
 * ProzorVozaciPrvenstva.java
 * 
 * Klasa ProzorVozaciPrvenstva predstavlja prozor aplikacije za upravljanje vozačima u prvenstvu Formule 1.
 * Omogućuje dodavanje vozača u prvenstvo, uklanjanje vozača iz prvenstva te pretragu dostupnih vozača.
 * 
 * Autor: Kesimator
 */
package formula1.view;

import formula1.controller.ObradaVozaci;
import formula1.model.Vozaci;
import formula1.util.Alati;
import formula1.util.EdunovaException;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Kesimator
 */
/**
 * Klasa ProzorVozaciPrvenstva predstavlja prozor za upravljanje vozačima u
 * prvenstvu Formule 1.
 */
public class ProzorVozaciPrvenstva extends javax.swing.JFrame {

    private ProzorPrvenstva prozorPrvenstva;
    private ObradaVozaci obradaVozaci;

    /**
     * Konstruktor klase ProzorVozaciPrvenstva.
     */
    public ProzorVozaciPrvenstva() {
        initComponents();
        obradaVozaci = new ObradaVozaci();

        postaviRendererZaListu();
        postaviRendererZaListuDostupniVozaci();
        prikaziDostupneVozace();
    }

    /**
     * Konstruktor klase ProzorVozaciPrvenstva s parametrom prozorPrvenstva.
     *
     * @param prozorPrvenstva Prozor prvenstva
     */
    public ProzorVozaciPrvenstva(ProzorPrvenstva prozorPrvenstva) {
        this(); // Poziv drugog konstruktora
        this.prozorPrvenstva = prozorPrvenstva;
        setTitle("SEZONA:        " + prozorPrvenstva.getObradaPrvenstva().getEntitet().getSezona());

        Vozaci vozac = prozorPrvenstva.getObradaPrvenstva().getEntitet().getVozac();
        DefaultListModel<Vozaci> m = new DefaultListModel<>();
        // Provjeri postoji li vozač za trenutnu sezonu
        if (vozac != null) {
            m.addElement(vozac);
        }
        lstVozacUPrvenstvu.setModel(m);
        lstVozacUPrvenstvu.repaint();
    }

    /**
     * Postavlja renderer za listu vozača u prvenstvu.
     */
    private void postaviRendererZaListu() {
        lstVozacUPrvenstvu.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                // Uzmi objekat Vozaci iz value parametra
                Vozaci v = (Vozaci) value;

                // Postavi ime i prezime vozača kao tekst labele
                label.setText(v.getIme() + " " + v.getPrezime());
                return label;
            }
        });
    }

    /**
     * Postavlja renderer za listu dostupnih vozača.
     */
    private void postaviRendererZaListuDostupniVozaci() {
        lstVozaciUBazi.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                // Uzmi objekat Vozaci iz value parametra
                Vozaci v = (Vozaci) value;

                // Postavi ime i prezime vozača kao tekst labele
                label.setText(v.getIme() + " " + v.getPrezime());
                return label;
            }
        });
    }

    /**
     * Sortira listu vozača abecedno.
     *
     * @param v Lista vozača
     * @return Sortirana lista vozača
     */
    private List<Vozaci> sortirajAbecedno(List<Vozaci> v) {
        v.sort(Comparator.comparing(Vozaci::getIme)
                .thenComparing(Vozaci::getPrezime));
        return v;
    }

    /**
     * Prikazuje dostupne vozače u listi.
     */
    private void prikaziDostupneVozace() {
        DefaultListModel<Vozaci> m = new DefaultListModel<>();
        List<Vozaci> sviDostupniVozaci = obradaVozaci.dohvatiVozaceUTimu();
        sviDostupniVozaci = sortirajAbecedno(sviDostupniVozaci);
        for (Vozaci v : sviDostupniVozaci) {
            m.addElement(v);
        }
        lblUkupnoDostupnihVozaca.setText("Pronađeno rezultata: " + m.getSize());
        lstVozaciUBazi.setModel(m);
        lstVozaciUBazi.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblVozaciUTimu = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstVozacUPrvenstvu = new javax.swing.JList<>();
        lblDostupniVozaci = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstVozaciUBazi = new javax.swing.JList<>();
        txtUvjet = new javax.swing.JTextField();
        btnTrazi = new javax.swing.JButton();
        btnDodaj = new javax.swing.JButton();
        btnUkloni = new javax.swing.JButton();
        lblUkupnoDostupnihVozaca = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblVozaciUTimu.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        lblVozaciUTimu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVozaciUTimu.setText("Vozač u prvenstvu");

        jScrollPane2.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        lstVozacUPrvenstvu.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lstVozacUPrvenstvu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(lstVozacUPrvenstvu);

        lblDostupniVozaci.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        lblDostupniVozaci.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDostupniVozaci.setText("Dostupni vozači");

        jScrollPane3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        lstVozaciUBazi.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lstVozaciUBazi.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lstVozaciUBazi);

        txtUvjet.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        txtUvjet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUvjetKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUvjetKeyReleased(evt);
            }
        });

        btnTrazi.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnTrazi.setText("Traži");
        btnTrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraziActionPerformed(evt);
            }
        });

        btnDodaj.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnDodaj.setText("<< Dodaj vozača u prvenstvo");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnUkloni.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnUkloni.setText("Ukloni vozača iz prvenstva >>");
        btnUkloni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUkloniActionPerformed(evt);
            }
        });

        lblUkupnoDostupnihVozaca.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        lblUkupnoDostupnihVozaca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUkupnoDostupnihVozaca.setText("Pronađeno rezultata:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblVozaciUTimu, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUkloni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDodaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUkupnoDostupnihVozaca, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtUvjet, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lblDostupniVozaci, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDostupniVozaci)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUvjet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTrazi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUkupnoDostupnihVozaca))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblVozaciUTimu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(btnDodaj)
                                .addGap(63, 63, 63)
                                .addComponent(btnUkloni)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Pokreće pretragu vozača na temelju unesenog uvjeta.
     *
     * @param evt Događaj klika na gumb Traži
     */
    private void btnTraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraziActionPerformed
        DefaultListModel<Vozaci> m = new DefaultListModel<>();

        // Dohvati tekst unesen u txtUvjet
        String uvjet = txtUvjet.getText().trim();

        // Dohvati sve vozače koji nisu dodijeljeni nijednom timu
        List<Vozaci> sviDostupniVozaci = obradaVozaci.dohvatiVozaceUTimu();

        // Prikaži vozače u listi
        for (Vozaci v : sviDostupniVozaci) {
            // Provjeri da li ime vozača sadrži uneseni uvjet
            if (v.getIme().toUpperCase().contains(uvjet.toUpperCase())) {
                m.addElement(v);
            }
        }

        lstVozaciUBazi.setModel(m);
    }//GEN-LAST:event_btnTraziActionPerformed

    /**
     * Pokreće pretragu vozača prilikom pritiska tipke Enter u polju za unos
     * teksta.
     *
     * @param evt Događaj pritiska tipke na tipkovnici
     */
    private void txtUvjetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUvjetKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnTraziActionPerformed(null);
        }
    }//GEN-LAST:event_txtUvjetKeyPressed

    /**
     * Filtrira vozače na temelju unesenog uvjeta teksta.
     */
    private void filtrirajVozace() {
        DefaultListModel<Vozaci> m = new DefaultListModel<>();
        List<Vozaci> sviDostupniVozaci = obradaVozaci.dohvatiVozaceUTimu();

        // Dohvati tekst unesen u txtUvjet
        String uvjet = txtUvjet.getText().trim().toUpperCase();

        // Prikaži samo vozače koji počinju s unesenim uvjetom u imenu
        for (Vozaci v : sviDostupniVozaci) {
            if (v.getIme().toUpperCase().startsWith(uvjet)) {
                m.addElement(v);
            }
        }

        // Sortiraj vozače abecedno
        List<Vozaci> sortiraniVozaci = new ArrayList<>(m.getSize());
        for (int i = 0; i < m.getSize(); i++) {
            sortiraniVozaci.add(m.getElementAt(i));
        }
        sortiraniVozaci.sort(Comparator.comparing(Vozaci::getIme).thenComparing(Vozaci::getPrezime));

        lblUkupnoDostupnihVozaca.setText("Pronađeno rezultata: " + sortiraniVozaci.size());

        // Očisti model liste prije dodavanja sortiranih vozača
        m.clear();
        // Dodaj sortirane vozače u model liste
        for (Vozaci v : sortiraniVozaci) {
            m.addElement(v);
        }

        lstVozaciUBazi.setModel(m);
        lstVozaciUBazi.repaint();
    }

    /**
     * Pokreće filtriranje vozača prilikom puštanja tipke na tipkovnici.
     *
     * @param evt Događaj puštanja tipke na tipkovnici
     */
    private void txtUvjetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUvjetKeyReleased
        // Pokreni pretragu teksta prilikom puštanja tipke
        filtrirajVozace();
    }//GEN-LAST:event_txtUvjetKeyReleased

    /**
     * Dodaje odabranog vozača u prvenstvo.
     *
     * @param evt Događaj klika na gumb Dodaj
     */
    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        // Provjeri trenutni broj vozača u listi     
        if (lstVozacUPrvenstvu.getModel().getSize() >= 1) {
            // Ako je broj vozača veći od 0, onemogući dodavanje novog vozača         
            ImageIcon slika = new ImageIcon(getClass().getResource("/f1logo70x29.jpg"));
            JOptionPane.showMessageDialog(this, "Moguće dodati samo jednog vozača u prvenstvo!",
                    "UPOZORENJE", JOptionPane.WARNING_MESSAGE, slika);
            return;
        }

        if (lstVozaciUBazi.getSelectedValue() == null) {
            return;
        }

        var v = lstVozaciUBazi.getSelectedValue();

        DefaultListModel<Vozaci> m = (DefaultListModel<Vozaci>) lstVozacUPrvenstvu.getModel();
        DefaultListModel<Vozaci> b = (DefaultListModel<Vozaci>) lstVozaciUBazi.getModel();

        try {
            // Dodaj vozača u prvenstvo
            prozorPrvenstva.getObradaPrvenstva().dodajVozaca(v);

            // Ukloni vozača iz liste dostupnih vozača i dodaj ga u listu vozača u prvenstvo
            m.addElement(v);
            b.removeElement(v);
        } catch (EdunovaException ex) {
            ex.printStackTrace();
            return;
        }
        prozorPrvenstva.popuniView();
        prikaziDostupneVozace();
    }//GEN-LAST:event_btnDodajActionPerformed

    /**
     * Uklanja odabranog vozača iz prvenstva.
     *
     * @param evt Događaj klika na gumb Ukloni
     */
    private void btnUkloniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUkloniActionPerformed
        if (lstVozacUPrvenstvu.getSelectedValue() == null) {
            return;
        }

        // Dohvati odabranog vozača
        Vozaci v = lstVozacUPrvenstvu.getSelectedValue();

        // Dohvati odabranu sezonu iz ProzorPrvenstva
        Integer s = prozorPrvenstva.getObradaPrvenstva().getEntitet().getSezona();

        // Ukloni vozača iz odabrane sezone
        try {
            prozorPrvenstva.getObradaPrvenstva().ukloniIzPrvenstva(v, s);
        } catch (EdunovaException ex) {
            ex.printStackTrace();
            // Ovdje možeš dodati odgovarajuću obradu iznimke ako je potrebno
            return;
        }

        // Osvježi prikaz u ProzorPrvenstvaVozaci
        prozorPrvenstva.popuniView();

        // Prikaži dostupne vozače
        prikaziDostupneVozace();

        DefaultListModel<Vozaci> m = (DefaultListModel<Vozaci>) lstVozacUPrvenstvu.getModel();
        m.removeElement(v);
    }//GEN-LAST:event_btnUkloniActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnTrazi;
    private javax.swing.JButton btnUkloni;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDostupniVozaci;
    private javax.swing.JLabel lblUkupnoDostupnihVozaca;
    private javax.swing.JLabel lblVozaciUTimu;
    private javax.swing.JList<Vozaci> lstVozacUPrvenstvu;
    private javax.swing.JList<Vozaci> lstVozaciUBazi;
    private javax.swing.JTextField txtUvjet;
    // End of variables declaration//GEN-END:variables
}
