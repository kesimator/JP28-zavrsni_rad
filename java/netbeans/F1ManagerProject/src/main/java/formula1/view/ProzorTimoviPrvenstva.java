package formula1.view;

import formula1.controller.ObradaTimovi;
import formula1.controller.ObradaVozaci;
import formula1.model.Timovi;
import formula1.model.Vozaci;
import formula1.util.Alati;
import formula1.util.EdunovaException;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author Kesimator
 */
/**
 * Klasa koja predstavlja prozor za dodavanje i uklanjanje timova iz prvenstva.
 * Omogućuje korisniku dodavanje jednog tima u prvenstvo te uklanjanje tima iz
 * prvenstva. Koristi se u kontekstu upravljanja prvenstvima u formi
 * ProzorPrvenstva.
 */
public class ProzorTimoviPrvenstva extends javax.swing.JFrame {

    private ProzorPrvenstva prozorPrvenstva;
    private ObradaTimovi obradaTimovi;

    /**
     * Konstruktor koji inicijalizira prozor i priprema sučelje za rad.
     */
    public ProzorTimoviPrvenstva() {
        initComponents();
        obradaTimovi = new ObradaTimovi();

        postaviRendererZaListu();
        postaviRendererZaListuDostupniTimovi();
        prikaziDostupneTimove();
    }

    /**
     * Konstruktor koji inicijalizira prozor s povezanim ProzorPrvenstva.
     * Postavlja naslov prozora na trenutnu sezonu prvenstva.
     *
     * @param prozorPrvenstva ProzorPrvenstva povezan s ovim prozorom
     */
    public ProzorTimoviPrvenstva(ProzorPrvenstva prozorPrvenstva) {
        this();
        this.prozorPrvenstva = prozorPrvenstva;
        setTitle("SEZONA:        " + prozorPrvenstva.getObradaPrvenstva().getEntitet().getSezona());

        Timovi tim = prozorPrvenstva.getObradaPrvenstva().getEntitet().getTim();
        DefaultListModel<Timovi> m = new DefaultListModel<>();
        if (tim != null) {
            m.addElement(tim);
        }
        lstTimUPrvenstvu.setModel(m);
        lstTimUPrvenstvu.repaint();
    }

    /**
     * Metoda koja postavlja prilagođeni renderer za listu timova u prvenstvu.
     * Renderer centrirano prikazuje ime tima.
     */
    private void postaviRendererZaListu() {
        lstTimUPrvenstvu.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                Timovi t = (Timovi) value;
                label.setText(t.getIme_tima());
                return label;
            }
        });
    }

    /**
     * Metoda koja postavlja prilagođeni renderer za listu dostupnih timova.
     * Renderer centrirano prikazuje ime tima.
     */
    private void postaviRendererZaListuDostupniTimovi() {
        lstTimoviUBazi.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                Timovi t = (Timovi) value;
                label.setText(t.getIme_tima());
                return label;
            }
        });
    }

    /**
     * Metoda koja sortira listu timova abecedno prema imenima timova.
     *
     * @param t Lista timova koju treba sortirati
     * @return Sortirana lista timova
     */
    private List<Timovi> sortirajAbecedno(List<Timovi> t) {
        t.sort(Comparator.comparing(Timovi::getIme_tima));
        return t;
    }

    /**
     * Metoda koja prikazuje sve dostupne timove u listi. Timovi se dohvaćaju
     * preko obrade timova, sortiraju abecedno i prikazuju u listi.
     */
    private void prikaziDostupneTimove() {
        DefaultListModel<Timovi> m = new DefaultListModel<>();
        List<Timovi> sviDostupniTimovi = obradaTimovi.dohvatiTimoveSVozacima();
        sviDostupniTimovi = sortirajAbecedno(sviDostupniTimovi);
        for (Timovi tim : sviDostupniTimovi) {
            m.addElement(tim);
        }
        lblUkupnoDostupnihTimova.setText("Pronađeno rezultata: " + m.getSize());
        lstTimoviUBazi.setModel(m);
        lstTimoviUBazi.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblVozaciUTimu = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTimUPrvenstvu = new javax.swing.JList<>();
        lblDostupniVozaci = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstTimoviUBazi = new javax.swing.JList<>();
        txtUvjet = new javax.swing.JTextField();
        btnTrazi = new javax.swing.JButton();
        btnDodaj = new javax.swing.JButton();
        btnUkloni = new javax.swing.JButton();
        lblUkupnoDostupnihTimova = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblVozaciUTimu.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        lblVozaciUTimu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVozaciUTimu.setText("Tim u prvenstvu");

        jScrollPane2.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        lstTimUPrvenstvu.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lstTimUPrvenstvu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(lstTimUPrvenstvu);

        lblDostupniVozaci.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        lblDostupniVozaci.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDostupniVozaci.setText("Dostupni timovi");

        jScrollPane3.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        lstTimoviUBazi.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        lstTimoviUBazi.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(lstTimoviUBazi);

        txtUvjet.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        txtUvjet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUvjetKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUvjetKeyReleased(evt);
            }
        });

        btnTrazi.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnTrazi.setText("Traži");
        btnTrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraziActionPerformed(evt);
            }
        });

        btnDodaj.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnDodaj.setText("<< Dodaj tim u prvenstvo");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnUkloni.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        btnUkloni.setText("Ukloni tim iz prvenstva >>");
        btnUkloni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUkloniActionPerformed(evt);
            }
        });

        lblUkupnoDostupnihTimova.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        lblUkupnoDostupnihTimova.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUkupnoDostupnihTimova.setText("Pronađeno rezultata:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblVozaciUTimu, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUkloni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDodaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUkupnoDostupnihTimova, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtUvjet, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lblDostupniVozaci, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDostupniVozaci)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUvjet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTrazi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUkupnoDostupnihTimova))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblVozaciUTimu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(btnDodaj)
                                .addGap(63, 63, 63)
                                .addComponent(btnUkloni)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metoda koja se poziva prilikom pritiska gumba za pretragu timova.
     * Pretražuje dostupne timove prema unesenom uvjetu i ažurira prikaz u
     * listi.
     */
    private void btnTraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraziActionPerformed
        DefaultListModel<Timovi> m = new DefaultListModel<>();

        // Dohvati tekst unesen u txtUvjet
        String uvjet = txtUvjet.getText().trim();

        // Dohvati sve vozače koji su dodijeljeni timu
        List<Timovi> sviDostupniTimovi = obradaTimovi.dohvatiTimoveSVozacima();

        // Prikaži timove u listi
        for (Timovi t : sviDostupniTimovi) {
            // Provjeri da li ime tima sadrži uneseni uvjet
            if (t.getIme_tima().toUpperCase().contains(uvjet.toUpperCase())) {
                m.addElement(t);
            }
        }

        lstTimoviUBazi.setModel(m);
    }//GEN-LAST:event_btnTraziActionPerformed

    /**
     * Metoda koja se poziva prilikom pritiska tipke na tipkovnici. Ako je
     * pritisnuta tipka ENTER, pokreće se pretraga timova.
     */
    private void txtUvjetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUvjetKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnTraziActionPerformed(null);
        }
    }//GEN-LAST:event_txtUvjetKeyPressed

    /**
     * Metoda koja filtrira timove prema unesenom uvjetu u realnom vremenu.
     * Ažurira prikaz dostupnih timova prema unesenom uvjetu.
     */
    private void filtrirajTimove() {
        DefaultListModel<Timovi> m = new DefaultListModel<>();
        List<Timovi> sviDostupniTimovi = obradaTimovi.dohvatiTimoveSVozacima();

        // Dohvati tekst unesen u txtUvjet
        String uvjet = txtUvjet.getText().trim().toUpperCase();

        // Prikaži samo timove koji počinju s unesenim uvjetom u imenu tima
        for (Timovi t : sviDostupniTimovi) {
            if (t.getIme_tima().toUpperCase().startsWith(uvjet)) {
                m.addElement(t);
            }
        }

        // Sortiraj timove abecedno
        List<Timovi> sortiraniTimovi = new ArrayList<>(m.getSize());
        for (int i = 0; i < m.getSize(); i++) {
            sortiraniTimovi.add(m.getElementAt(i));
        }
        sortiraniTimovi.sort(Comparator.comparing(Timovi::getIme_tima));

        lblUkupnoDostupnihTimova.setText("Pronađeno rezultata: " + sortiraniTimovi.size());

        // Očisti model liste prije dodavanja sortiranih timova
        m.clear();
        // Dodaj sortirane timove u model liste
        for (Timovi t : sortiraniTimovi) {
            m.addElement(t);
        }

        lstTimoviUBazi.setModel(m);
    }

    /**
     * Metoda koja se poziva prilikom puštanja tipke na tipkovnici. Ažurira
     * prikaz dostupnih timova prema unesenom uvjetu.
     */
    private void txtUvjetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUvjetKeyReleased
        // Pokreni pretragu teksta prilikom puštanja tipke
        filtrirajTimove();
    }//GEN-LAST:event_txtUvjetKeyReleased

    /**
     * Metoda koja se poziva prilikom pritiska gumba za dodavanje tima u
     * prvenstvo. Dodaje odabrani tim iz liste dostupnih timova u prvenstvo.
     */
    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        // Provjeri trenutni broj timova u listi     
        if (lstTimUPrvenstvu.getModel().getSize() >= 1) {
            // Ako je broj timova veći od 0, onemogući dodavanje novog tima         
            ImageIcon slika = new ImageIcon(getClass().getResource("/f1logo70x29.jpg"));
            JOptionPane.showMessageDialog(this, "Moguće dodati samo jedan tim u prvenstvo!",
                    "UPOZORENJE", JOptionPane.WARNING_MESSAGE, slika);
            return;
        }

        if (lstTimoviUBazi.getSelectedValue() == null) {
            return;
        }

        var t = lstTimoviUBazi.getSelectedValue();

        DefaultListModel<Timovi> m = (DefaultListModel<Timovi>) lstTimUPrvenstvu.getModel();
        DefaultListModel<Timovi> b = (DefaultListModel<Timovi>) lstTimoviUBazi.getModel();

        try {
            // Dodaj tim u prvenstvo
            prozorPrvenstva.getObradaPrvenstva().dodajTim(t);

            // Ukloni tim iz liste dostupnih timova i dodaj ga u listu timova u prvenstvo
            m.addElement(t);
            b.removeElement(t);
        } catch (EdunovaException ex) {
            ex.printStackTrace();
            return;
        }
        prozorPrvenstva.popuniView();
        prikaziDostupneTimove();
    }//GEN-LAST:event_btnDodajActionPerformed

    /**
     * Metoda koja se poziva prilikom pritiska gumba za uklanjanje tima iz
     * prvenstva. Uklanja odabrani tim iz prvenstva.
     */
    private void btnUkloniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUkloniActionPerformed
        if (lstTimUPrvenstvu.getSelectedValue() == null) {
            return;
        }

        // Dohvati odabrani tim
        Timovi t = lstTimUPrvenstvu.getSelectedValue();

        // Dohvati odabranu sezonu iz ProzorPrvenstva
        Integer s = prozorPrvenstva.getObradaPrvenstva().getEntitet().getSezona();

        // Ukloni tim iz odabrane sezone
        try {
            prozorPrvenstva.getObradaPrvenstva().ukloniIzPrvenstva(t, s);
        } catch (EdunovaException ex) {
            ex.printStackTrace();
            // Ovdje možeš dodati odgovarajuću obradu iznimke ako je potrebno
            return;
        }

        // Osvježi prikaz u ProzorTimoviPrvenstva
        prozorPrvenstva.popuniView();

        // Prikaži dostupne vozače
        prikaziDostupneTimove();

        DefaultListModel<Timovi> m = (DefaultListModel<Timovi>) lstTimUPrvenstvu.getModel();
        m.removeElement(t);
    }//GEN-LAST:event_btnUkloniActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnTrazi;
    private javax.swing.JButton btnUkloni;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDostupniVozaci;
    private javax.swing.JLabel lblUkupnoDostupnihTimova;
    private javax.swing.JLabel lblVozaciUTimu;
    private javax.swing.JList<Timovi> lstTimUPrvenstvu;
    private javax.swing.JList<Timovi> lstTimoviUBazi;
    private javax.swing.JTextField txtUvjet;
    // End of variables declaration//GEN-END:variables
}
